init sampler...
done
burn-in...
done
sampling...
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
done
Wrote profile results to qs.py.lprof
Timer unit: 1e-06 s

Total time: 10.864 s
File: samplers/shrinking_bullseye.py
Function: __init__ at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                               @profile
    38                                               def __init__(self, prior, true_like, start, S_seed, fS_seed, train = None, size=int(1e9)):
    39         4          4.0      1.0      0.0          self.prior = prior
    40         4          3.0      0.8      0.0          self.true_like = true_like
    41         4          4.0      1.0      0.0          self.log_like = lambda x: np.log( true_like( x ) )
    42                                           
    43         4         12.0      3.0      0.0          self.shape = [size,np.shape(start)[0]]
    44         4          4.0      1.0      0.0          self.dim = np.shape(start)[0]
    45         4         52.0     13.0      0.0          self.samps = np.zeros(self.shape)
    46                                           
    47                                           
    48         4          3.0      0.8      0.0          if self.dim == 1:
    49                                                       self.Ndef = int((self.dim+1)*(self.dim+2)/2)
    50                                           
    51                                                       self.N = 2*self.Ndef
    52                                           
    53                                                   else:
    54         4          7.0      1.8      0.0              self.Ndef = int((self.dim+1)*(self.dim+2)/2)
    55         4         35.0      8.8      0.0              self.N = int(np.ceil(np.sqrt(self.dim)*self.Ndef))
    56                                                   
    57         4         12.0      3.0      0.0          self.samps[0,:] = start
    58         4          5.0      1.2      0.0          self.curr = self.samps[0]
    59                                           
    60         4          2.0      0.5      0.0          self.refine_tracker = []
    61                                           
    62         4          1.0      0.2      0.0          if self.dim == 1:
    63                                                       self.S = np.reshape(S_seed, [np.shape(S_seed)[0],1] )
    64                                                       self.fS = np.reshape(fS_seed, [np.shape(fS_seed)[0],1] )
    65                                           
    66                                                   else:
    67         4          2.0      0.5      0.0              self.S = S_seed
    68         4          1.0      0.2      0.0              self.fS = fS_seed
    69                                           
    70         4          2.0      0.5      0.0          self.t = 0
    71         4          2.0      0.5      0.0          self.accept_freq = 0
    72                                           
    73         4          2.0      0.5      0.0          if train == None:
    74                                                       train = len(S)
    75                                           
    76                                                   else:
    77                                                       pass
    78                                                   
    79         4   10863885.0 2715971.2    100.0          self.seed_grow( train )

Total time: 10.5786 s
File: samplers/shrinking_bullseye.py
Function: seed_grow at line 81

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    81                                               @profile
    82                                               def seed_grow( self, train_size ):
    83         4         34.0      8.5      0.0          orig_S = copy.copy( self.S )
    84        84         96.0      1.1      0.0          for s in orig_S:
    85                                                       
    86    666680    5438254.0      8.2     51.4              S_spacing = np.mean( [ npla.norm( s1 - s2 ) for s1,s2 in it.combinations_with_replacement( self.S, 2 ) ] )
    87                                           
    88       880        978.0      1.1      0.0              for junk_index in range( train_size):
    89       800     181965.0    227.5      1.7                  refine_center = s + np.random.multivariate_normal( np.zeros( self.dim ) , S_spacing * np.eye( self.dim ) )
    90       800       5040.0      6.3      0.0                  refine_range = 2 * S_spacing * np.random.uniform()
    91                                           
    92       800    4952267.0   6190.3     46.8                  self.refine( refine_center, refine_range )

Total time: 0.467619 s
File: samplers/shrinking_bullseye.py
Function: rad_calc at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               @profile
    96                                               def rad_calc(self, theta, N ):
    97      4796     455214.0     94.9     97.3          radii = np.sort(npla.norm( self.S- theta, ord=2, axis=1 ))
    98                                           
    99      4796       4013.0      0.8      0.9          try:
   100      4796       5944.0      1.2      1.3              Rdef = radii[N+1]
   101                                           
   102                                                   except IndexError:
   103                                                       print 'Sample set S is too small, consider increasing'
   104                                                       return np.max( radii )
   105                                                               
   106      4796       2448.0      0.5      0.5          return Rdef

Total time: 0.447336 s
File: samplers/shrinking_bullseye.py
Function: weight_func at line 108

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   108                                               @profile
   109                                               def weight_func(self, theta, b, Rdef, R):
   110     23980     388222.0     16.2     86.8          r = npla.norm( theta - b )
   111                                           
   112     23980      17705.0      0.7      4.0          if r <= Rdef:
   113     18649      18215.0      1.0      4.1              return 1.
   114                                           
   115      5331       3987.0      0.7      0.9          elif ( Rdef <= r ) and ( r <= R ):            
   116      5331      16517.0      3.1      3.7              w = (1. - ( (r-Rdef)/(R-Rdef) )**3.)**3.
   117                                                       
   118      5331       2690.0      0.5      0.6              return w
   119                                           
   120                                                   else:
   121                                                       return 0.

Total time: 2.34356 s
File: samplers/shrinking_bullseye.py
Function: regress at line 125

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   125                                               @profile
   126                                               def regress(self, theta, B, fB, Rdef, R, i = None):        
   127      2398       3561.0      1.5      0.2          N = B.shape[0]
   128                                           
   129      2398       4026.0      1.7      0.2          if len(B.shape) == 1:
   130                                                       B = np.reshape(B, (N, self.dim) )
   131                                           
   132                                           
   133      2398      21697.0      9.0      0.9          phi = np.ones([ N, (self.dim + 2)*(self.dim + 1)/2 ])
   134                                           
   135      2398       1946.0      0.8      0.1          try:
   136      2398       4076.0      1.7      0.2              assert phi.shape[0] > phi.shape[1]
   137                                           
   138                                                   except AssertionError:
   139                                                       print 'insufficient sample points, inference may be problematic...'
   140                                           
   141      2398     158533.0     66.1      6.8          scale = np.sqrt(np.var(theta))
   142      2398      24202.0     10.1      1.0          theta_hat = (B - theta)/scale
   143                                                   
   144     26378     695568.0     26.4     29.7          w = np.array([ self.weight_func( np.zeros(self.dim) , b, Rdef/scale , R/scale )  for b in theta_hat ])
   145                                                   
   146      2398      10450.0      4.4      0.4          phi[:,1:(self.dim+1)] = theta_hat
   147                                           
   148     98318     175858.0      1.8      7.5          theta_hat_squared = np.array([ [a*b for a,b in it.combinations_with_replacement(row,2)] for row in theta_hat ])
   149                                                   
   150      2398       6915.0      2.9      0.3          phi[:,(self.dim+1):] = theta_hat_squared
   151                                                  
   152      2398     455857.0    190.1     19.5          q,r = npla.qr( np.dot( phi.T, np.dot(np.diag(w),phi) ), mode='complete')        
   153                                           
   154      2398     761945.0    317.7     32.5          Z = np.dot( npla.inv(r), q.T )            
   155      2398      16760.0      7.0      0.7          Z = np.dot( Z, np.dot( phi.T, w * fB) )
   156                                           
   157      2398       2170.0      0.9      0.1          return Z, q, r, w

Total time: 0.115172 s
File: samplers/shrinking_bullseye.py
Function: regress_predict at line 159

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   159                                               @profile
   160                                               def regress_predict(self, theta, Z):        
   161     25948     115172.0      4.4    100.0          return np.exp( Z[0] )

Total time: 3.97066 s
File: samplers/shrinking_bullseye.py
Function: post_approx at line 163

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   163                                               @profile
   164                                               def post_approx( self, theta ): 
   165      2398     282613.0    117.9      7.1          Rdef = self.rad_calc( theta, self.Ndef )
   166      2398     226413.0     94.4      5.7          R  = self.rad_calc( theta, self.N )
   167                                                   
   168      2398     169265.0     70.6      4.3          B = self.S[ npla.norm(self.S - theta, axis=1 ) < R ]
   169      2398     137099.0     57.2      3.5          fB = np.array(self.fS)[ npla.norm(self.S - theta, axis=1 ) < R ]
   170                                                   
   171      2398    2496394.0   1041.0     62.9          Z, q, r, w = self.regress( theta, B, fB, Rdef, R)               
   172                                                       
   173      2398     656505.0    273.8     16.5          post = self.prior( theta ) * self.regress_predict( theta, Z )
   174                                           
   175      2398       2375.0      1.0      0.1          return post, Z, q, r, w, R, B, fB

Total time: 16.8274 s
File: samplers/shrinking_bullseye.py
Function: cross_val at line 179

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   179                                               @profile
   180                                               def cross_val(self, theta, post_theta_prime, a , B, fB, q, r, W, cand_flag = 0, eps = 1e-2):
   181      2355       3929.0      1.7      0.0          N = B.shape[0]
   182                                           
   183      2355       7422.0      3.2      0.0          a_list = np.zeros(N)
   184                                           
   185      2355     144741.0     61.5      0.9          scale = np.sqrt(np.var(theta))
   186                                                       
   187     25905      35354.0      1.4      0.2          for i in range(0,N):            
   188     23550     994236.0     42.2      5.9              W_up = np.delete( W, i )
   189     23550     817643.0     34.7      4.9              B_up = np.delete( B, i, axis=0 )
   190     23550     762754.0     32.4      4.5              fB_up = np.delete( fB, i )
   191                                           
   192     23550     187994.0      8.0      1.1              phi_up = np.ones([ N-1, (self.dim + 2)*(self.dim + 1)/2 ])
   193                                           
   194     23550     257584.0     10.9      1.5              theta_hat = (B_up - theta)/scale
   195                                                       
   196     23550      76975.0      3.3      0.5              phi_up[:,1:(self.dim+1)] = theta_hat
   197                                                       
   198    871350    1863493.0      2.1     11.1              theta_hat_squared = np.array([ [x*y for x,y in it.combinations_with_replacement(row,2)] for row in theta_hat ])
   199                                                   
   200     23550      68727.0      2.9      0.4              phi_up[:,(self.dim+1):] = theta_hat_squared
   201                                           
   202     94200     561850.0      6.0      3.3              phi_down = np.concatenate([ [1], (B[i]-theta)/scale, [x*y for x,y in it.combinations_with_replacement( (B[i]-theta)/scale, 2 ) ] ])
   203                                           
   204     23550     821822.0     34.9      4.9              q_up, r_up = scla.qr_update( q, r, -phi_down, phi_down )
   205                                                       
   206     23550    3503942.0    148.8     20.8              Z_up = np.dot( npla.inv(r_up), q_up.T )
   207     23550     161597.0      6.9      1.0              Z_up = np.dot( Z_up, np.dot( phi_up.T, W_up * fB_up ) )
   208                                           
   209     23550    6034963.0    256.3     35.9              post_up = self.prior( theta ) * self.regress_predict( theta, Z_up )
   210                                           
   211     23550      38721.0      1.6      0.2              try:
   212     23550      44317.0      1.9      0.3                  assert post_up >= 0.
   213                                           
   214                                                       except AssertionError:
   215                                                           post_up = abs( post_up )
   216                                           
   217     23550      27066.0      1.1      0.2              if cand_flag:
   218     23550     303579.0     12.9      1.8                  a_list[i] = self.a_calc( post_up, post_theta_prime )
   219                                           
   220                                                       else:
   221                                                           a_list[i] = self.a_calc( post_theta_prime, post_up )
   222                                           
   223     25905      78356.0      3.0      0.5          err_list = np.abs(a-a_list) + np.abs(min(1.,1./a)-np.array([min(1.,1./a_up) for a_up in a_list]))
   224      2355      24541.0     10.4      0.1          err = np.max(err_list)
   225      2355       3493.0      1.5      0.0          if err >= eps:
   226      1951       1943.0      1.0      0.0              return 1
   227                                                   else:
   228       404        389.0      1.0      0.0              return 0

Total time: 0.119566 s
File: samplers/shrinking_bullseye.py
Function: propose at line 230

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   230                                               @profile
   231                                               def propose(self, theta, var):
   232       404        318.0      0.8      0.3          if self.dim == 1:
   233                                                       return np.random.normal( theta, var, 1)[0]
   234                                           
   235                                                   else:
   236       404     119248.0    295.2     99.7              return np.random.multivariate_normal( theta, var, 1 )[0]

Total time: 27.1482 s
File: samplers/shrinking_bullseye.py
Function: refine at line 239

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   239                                               @profile
   240                                               def refine(self,theta,R):
   241                                                   # require that the refinement is within .9*R, rather than just R, bc otherwise the sol tends to be slightly outside R due to numerical error 
   242      2751       5771.0      2.1      0.0          cons = [{'type' : 'ineq', 'fun': lambda x: .9*R - npla.norm(x - theta)},
   243      2751       4901.0      1.8      0.0                  {'type' : 'ineq', 'fun': lambda x: self.prior(x)*self.true_like(x) } ]            
   244                                                   
   245      2751       3401.0      1.2      0.0          penalty = lambda x: -1*np.min( npla.norm( x - self.S, axis=1 ) )
   246                                                   
   247      2751   25725357.0   9351.3     94.8          sol = sp.optimize.minimize( penalty, theta, constraints=cons, tol=1e-1 ) #, options = {'maxiter' : 10000})
   248                                           
   249      2751       7147.0      2.6      0.0          self.refine_tracker.append( self.t )
   250                                           
   251      2751       6651.0      2.4      0.0          update = sol['x']
   252                                                               
   253      2751      70226.0     25.5      0.3          if not any( np.isnan(update) ) and npla.norm( theta - update ) <= R  :
   254      1644      29648.0     18.0      0.1              self.S = np.vstack([ self.S, update])
   255      1644     351041.0    213.5      1.3              self.fS = np.concatenate([ self.fS, [self.log_like(update)] ])
   256                                           
   257                                           
   258                                                   else:
   259                                                       #print 'Suitable refinement not found, adding random point'
   260                                                       
   261      1107     353296.0    319.1      1.3              update = np.random.multivariate_normal(theta, (R/3)*np.eye(self.dim ))
   262                                           
   263      1107     281985.0    254.7      1.0              while self.prior( update ) < 0:
   264                                                           update = np.random.multivariate_normal(theta, (R/3)*np.eye(self.dim ))
   265                                           
   266      1107      25406.0     23.0      0.1              self.S = np.vstack([ self.S, update])
   267      1107     283363.0    256.0      1.0              self.fS = np.concatenate([ self.fS, [self.log_like(update)] ])

Total time: 0.15653 s
File: samplers/shrinking_bullseye.py
Function: a_calc at line 270

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   270                                               @profile        
   271                                               def a_calc( self, p_cand, p_curr ):
   272     25905      24664.0      1.0     15.8          if p_curr == 0.0:
   273                                                       return 1.
   274                                           
   275     25905      85821.0      3.3     54.8          elif np.isnan( p_cand ):
   276                                                       return 0.
   277                                           
   278                                                   else:            
   279     25905      46045.0      1.8     29.4              return min( 1. , p_cand/p_curr )

Total time: 25.7341 s
File: samplers/shrinking_bullseye.py
Function: refine_routine at line 283

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   283                                               @profile
   284                                               def refine_routine(self):
   285      1951   22280201.0  11419.9     86.6          self.refine( self.cand, self.cand_R )
   286      1951    3365113.0   1724.8     13.1          self.cand_post, self.cand_Z, self.cand_q, self.cand_r, self.cand_w, self.cand_R, self.cand_B, self.cand_fB = self.post_approx( self.cand )
   287                                                       
   288      1951       2069.0      1.1      0.0          if self.t==0:
   289        35      61789.0   1765.4      0.2              self.curr_post, self.curr_Z, self.curr_q, self.curr_r, self.curr_w, self.curr_R, self.curr_B, self.curr_fB = self.post_approx( self.curr )
   290                                                           
   291                                                   else:
   292                                                       pass
   293                                                       
   294      1951      24948.0     12.8      0.1          self.a = self.a_calc( self.cand_post, self.curr_post )

Total time: 44.9159 s
File: samplers/shrinking_bullseye.py
Function: update at line 299

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   299                                               @profile
   300                                               def update(self, var ):
   301       404       1097.0      2.7      0.0          eps = 0.1*(self.t+1)**(-0.1)
   302       404        590.0      1.5      0.0          rand_refine = 0.01*(self.t+1)**(-0.2)
   303                                           
   304       404     122685.0    303.7      0.3          self.cand = self.propose( self.curr, var )
   305                                           
   306                                           
   307       404     568464.0   1407.1      1.3          self.cand_post, self.cand_Z, self.cand_q, self.cand_r, self.cand_w, self.cand_R, self.cand_B, self.cand_fB = self.post_approx( self.cand )
   308                                                   
   309       404        575.0      1.4      0.0          if self.t==0:
   310         8       9034.0   1129.2      0.0              self.curr_post, self.curr_Z, self.curr_q, self.curr_r, self.curr_w, self.curr_R, self.curr_B, self.curr_fB = self.post_approx( self.curr )
   311                                           
   312                                                   else:
   313                                                       pass
   314                                           
   315       404       5263.0     13.0      0.0          self.a = self.a_calc( self.cand_post, self.curr_post )
   316                                           
   317                                           
   318       404       3421.0      8.5      0.0          if np.random.binomial(1, rand_refine):
   319                                                       self.refine_routine()
   320                                           
   321                                                   else:
   322                                                       pass
   323                                           
   324                                           
   325                                           
   326      2355   18443101.0   7831.5     41.1          while self.cross_val( self.cand, self.curr_post, self.a, self.cand_B, self.cand_fB, self.cand_q, self.cand_r, self.cand_w, cand_flag = 1, eps=eps ):            
   327      1951   25752882.0  13199.8     57.3              self.refine_routine()
   328                                           
   329       404       4403.0     10.9      0.0          accept_flag = np.random.binomial( 1, self.a )
   330                                           
   331       404        816.0      2.0      0.0          if self.t > self.samps.shape[0]:
   332                                                       self.samps = np.vstack([ self.samps, np.zeros( self.dim ) ])
   333                                                       
   334                                                   else:
   335                                                       pass
   336                                                   
   337       404        417.0      1.0      0.0          if accept_flag:
   338       102        279.0      2.7      0.0              self.samps[ self.t ] = self.cand
   339       102        198.0      1.9      0.0              self.curr = self.cand
   340                                                       
   341       102        110.0      1.1      0.0              self.curr_post, self.curr_Z, self.curr_q, self.curr_r, self.curr_w, self.curr_R, self.curr_B, self.curr_fB = ( self.cand_post,
   342       102        106.0      1.0      0.0                                                                                                                             self.cand_Z,
   343       102        107.0      1.0      0.0                                                                                                                             self.cand_q,
   344       102         97.0      1.0      0.0                                                                                                                             self.cand_r,
   345       102        103.0      1.0      0.0                                                                                                                             self.cand_w,
   346       102        102.0      1.0      0.0                                                                                                                             self.cand_R,
   347       102        115.0      1.1      0.0                                                                                                                             self.cand_B,
   348       102        317.0      3.1      0.0                                                                                                                             self.cand_fB )
   349                                                       
   350       102        169.0      1.7      0.0              self.accept_freq += 1
   351                                                       
   352                                                   else:
   353       302        836.0      2.8      0.0              self.samps[ self.t ] = self.curr
   354                                                       
   355       404        594.0      1.5      0.0          self.t += 1

